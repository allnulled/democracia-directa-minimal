asigno window.PaginaDeVerProblema como un componente vue2 con nombre "PaginaDeVerProblema" con plantilla {
  <div class="PaginaDeVerProblema Component">
    <WinVentana titulo="üåê Ver problema">
      <MigasDePan :root="root" :migas="[{texto: 'Inicio',link:'/'},{texto: 'Ver problemas',link:'/VerProblemas'},{texto: 'Ver problema',link:false}]" />
      <VisorDeDato :root="root" tabla-prop="Problema" :id-prop="this.$route.params.id_problema" />
      <div class="padding_1 padding_top_0 row">
        <router-link class="col-4" :to="'/CrearSolucion/' + $route.params.id_problema">
          <button class="width_100">Crear soluci√≥n</button>
        </router-link>
        <router-link class="col-4" :to="'/VerSoluciones?' + root.$utilidades.crearParametrosQuerystring(busqueda)">
          <button class="width_100">Ver soluciones</button>
        </router-link>
        <router-link class="col-4" :to="'/VerImplementaciones?' + root.$utilidades.crearParametrosQuerystring(busqueda)">
          <button class="width_100">Ver implementaciones</button>
        </router-link>
      </div>
      <div class="padding_1 padding_top_0 row">
        <div class="col-4">
          <button class="width_100 danger_button" :disabled="haVotadoYa" v-on:click="() => votarEnContra('id_problema', this.$route.params.id_problema)">Votar en contra</button>
        </div>
        <div class="col-4">
          <button class="width_100 neutral_button" :disabled="!haVotadoYa" v-on:click="() => retirarVoto(votoPrevio.id)">Retirar voto</button>
        </div>
        <div class="col-4">
          <button class="width_100 success_button" :disabled="haVotadoYa" v-on:click="() => votarAFavor('id_problema', this.$route.params.id_problema)">Votar a favor</button>
        </div>
      </div>
    </WinVentana>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    m√©todo data donde {
      debugo "PaginaDeVerProblema.data".
      retorno {
        votoPrevio: undefined,
        haVotadoYa: false,
        busqueda: {
          filtros: [
            ["id_problema", "=", this.$route.params.id_problema]
          ] textualizado
        }
      }.
    }.
    propiedad methods como {
      m√©todo as√≠ncrono votarEnContra con (propiedad, valor) donde {
        hago as√≠ncronamente this.root.votarEnContra(propiedad, valor).
        hago as√≠ncronamente this.obtenerVoto().
        hago this.$forceUpdate(true).
      }.
      m√©todo as√≠ncrono retirarVoto con (propiedad, valor) donde {
        hago as√≠ncronamente this.root.retirarVoto(propiedad, valor).
        hago as√≠ncronamente this.obtenerVoto().
        hago this.$forceUpdate(true).
      }.
      m√©todo as√≠ncrono votarAFavor con (propiedad, valor) donde {
        hago as√≠ncronamente this.root.votarAFavor(propiedad, valor).
        hago as√≠ncronamente this.obtenerVoto().
        hago this.$forceUpdate(true).
      }.
      m√©todo as√≠ncrono obtenerVoto donde {
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/ConsultarDatos"
          con m√©todo "POST"
          con cuerpo {
            tabla: "Voto",
            filtros: [
              ["id_problema", "=", parseInt(this.$route.params.id_problema)]
            ]
          }
          con cabeceras {
            authorization: this.root.tokenDeSesion
          }
          en errores hago this.root.gestionarError(error).
        compruebo que respuesta_1.data.data.mensaje es igual que "La consulta fue realizada correctamente".
        si respuesta_1.data.data.datos.length es mayor que 0 {
          asigno this.haVotadoYa como true.
          asigno this.votoPrevio como respuesta_1.data.data.datos[0].
        } y si no {
          asigno this.haVotadoYa como false.
          asigno this.votoPrevio como undefined.
        }.
      }.
    }.
    propiedad watch como {}.
    m√©todo beforeMount donde {}.
    m√©todo as√≠ncrono mounted donde {}.
  }.
}.